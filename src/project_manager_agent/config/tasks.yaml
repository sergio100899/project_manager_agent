define_scope_and_objectives:
  description: >
    Analyze the provided project idea: '{project_description}'.
    Based on this, define the project's scope, identify key stakeholders,
    and establish clear, measurable, and achievable primary objectives.
    Remember that today is {today}.
  expected_output: >
    A detailed markdown document with the following sections:
    1.  **Project Scope:** A clear definition of what is included and excluded from the project.
    2.  **Key Objectives:** A bulleted list of 3-5 main goals for the project.
    3.  **Stakeholders:** A list of identified stakeholders and their primary interests.
    4.  **Initial Analysis:** A brief summary of potential benefits and risks.
  agent: project_strategist

design_team_structure:
  description: >
    Based on the project's scope and objectives, design the ideal team structure.
    Define the necessary teams (e.g., Frontend, Backend, DevOps, QA), the specific roles
    within each team, and the recommended number of people for each role.
  expected_output: >
    A markdown document outlining the team structure. It should include:
    - A list of required teams.
    - For each team, a list of roles (e.g., Senior Developer, Junior Developer, UI/UX Designer).
    - The recommended size for each team and role.
    - A brief justification for this structure.
  agent: team_architect
  context:
    - define_scope_and_objectives

create_project_plan:
  description: >
    Create a comprehensive project plan. This includes breaking down the project into
    phases, defining high-level tasks or epics for each phase, estimating timelines,
    and creating a markdown table to visualize the schedule and dependencies.
  expected_output: >
    A detailed project plan in markdown format, containing:
    1.  **Project Phases:** A breakdown of the project into logical phases (e.g., Discovery, Development Sprint 1, UAT, Deployment).
    2.  **High-Level Tasks:** Key tasks and deliverables for each phase.
    3.  **Estimated Timeline:** An estimated duration for each phase and the total project.
    4.  **Timetable:** A timetable showing the project schedule and task dependencies.
    5. Formatted as markdown without '```'
  agent: project_planner
  context:
    - define_scope_and_objectives
    - design_team_structure
  markdown: true
  output_file: output/schedule.md

design_technology_architecture:
  description: >
    Using the defined project scope and team structure, design a coherent,
    validated, and secure technology architecture for the project. The architecture
    must clearly describe the technology stack, main components, data flow,
    and security/scalability considerations.
  expected_output: >
    Produce a well-structured **Markdown document** (`technology_architecture.md`) that includes:
    1. **Technology Stack:**  
      A concise list of programming languages, frameworks, databases, APIs, and tools to be used, with rationale for key choices.
    2. **Architectural Pattern:**  
      A short explanation of the architectural style (e.g., microservices, layered, monolithic) and why it fits the project’s needs.
    3. **Component Breakdown:**  
      A list and description of all major components or subsystems, including their main responsibilities and data flow.
    4. **Integration and Dependencies:**  
      Describe how components interact with external systems (e.g., authentication, APIs, data pipelines).
    5. **Security and Scalability Considerations:**  
      Outline key security layers, data protection, and scalability strategies relevant to the chosen architecture.
    6. Formatted as markdown without '```'
  agent: technology_architect
  context:
    - define_scope_and_objectives
    - design_team_structure
  markdown: true
  output_file: output/architecture.md

generate_architecture_html:
  description: >
    Generate a clean software architecture diagram in pure HTML (not Markdown, not Mermaid),
    fully self-contained and wrapped explicitly between <html>...</html> tags.
    The HTML must be render-ready in Streamlit via st.components.html, with inline structure only.
    The HTML must be passed adter to the tool html_cleaner.
  expected_output: >
    One <html>...</html> block — a full detailed architecture diagram with a clear title — ready to render with no extra wrapping.
    Full described architecture diagrama reflecting the technologies and the communication between them.
  agent: visual_diagram_designer
  context:
    - design_technology_architecture
  markdown: false
  output_file: output/architecture.html
  validation_instructions: >
    Before finalizing, the agent must verify:
      - Output contains ONLY one full <html>...</html> block.
      - Diagram must have a clear title.
      - No markdown, no backticks, no comments.
      - HTML must be with dark background and white font.
      - No external dependencies (no JS, no CSS links).
      - No reasoning texts.
      - STRICT: Output must start with <html> and end with </html>.

generate_gantt_html:
  description: >
    Generate a clean Gantt-style project plan timeline in pure HTML (not Markdown, not Mermaid),
    fully self-contained and wrapped explicitly between <html>...</html> tags.
    The HTML must be render-ready in Streamlit via st.components.html, with inline structure only.
    The HTML must be passed adter to the tool html_cleaner.
  expected_output: >
    One <html>...</html> block — a full detailed Gantt diagram with a clear title — ready to render with no extra wrapping.
  agent: visual_diagram_designer
  context:
    - create_project_plan
  markdown: false
  output_file: output/gantt.html
  validation_instructions: >
    Before finalizing, the agent must verify:
      - Output contains ONLY one full <html>...</html> block.
      - Diagram must have a clear title.
      - No markdown, no backticks, no comments.
      - HTML must be with dark background and white font.
      - No external dependencies (no JS, no CSS links).
      - No reasoning texts.
      - STRICT: Output must start with <html> and end with </html>.


compile_final_report:
  description: >
    Consolidate all the information from the previous tasks (scope, objectives, team structure, and project plan)
    into a single, cohesive, and well-structured final project plan document.
    The final report should be ready for executive review.
  expected_output: >
    A complete and polished project plan document in markdown format. It must integrate and synthesize the outputs
    from the strategist, architect, and planner into a final report with a clear, logical structure.
    The document should have a title, an executive summary, and dedicated sections for each component of the plan.
    Formatted as markdown without '```'
  agent: pmo_reporter
  context:
    - define_scope_and_objectives
    - design_team_structure
    - create_project_plan
    - design_technology_architecture
  markdown: true
  output_file: output/report.md
